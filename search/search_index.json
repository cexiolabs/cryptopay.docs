{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CryptoPay CryptoPay offers a crypto processing features like a: Exchange service Payment service (like buying goods) Crypto holding","title":"Overview"},{"location":"#cryptopay","text":"CryptoPay offers a crypto processing features like a: Exchange service Payment service (like buying goods) Crypto holding","title":"CryptoPay"},{"location":"api/","text":"REST API Basics Data is returned in ascending order. Oldest first, newest last. All time and timestamp related fields are in ISO 8601 . For GET endpoints, parameters must be sent as a query string . For POST, PUT, and DELETE endpoints, the parameters are sent in the request body with content type application/json . Success request codes: 2XX Client's mistakes: 4XX Server's errors: 5XX Responses Our API uses HTTP status codes to indicate the status of your requests. This includes successful and unsuccessful responses. 2xx (Successful): The request was successfully received, understood, and accepted 4xx (Client Error): The request contains bad syntax or cannot be fulfilled 5xx (Server Error): The server failed to fulfill an apparently valid request Error Reason Phrase An unsuccessful response DOES NOT HAVE body. Error message passed via Reason Phrase along with Status Code Status Code Meaning 200 OK Standard response for successful HTTP requests 201 Created The request has been fulfilled, resulting in the creation of a new resource 202 Accepted The request has been accepted for processing, but the processing has not been completed 400 {{Reason Phrase}} The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing) 401 {{Reason Phrase}} Most likely you wasn't able to construct and sign your API request correctly using HMAC 403 {{Reason Phrase}} You don't have required permissions to perform requested action on the resource 404 {{Reason Phrase}} We don't have the resource you've requested 409 {{Reason Phrase}} Most likely the client's identifier value you're trying to use had been used before 422 {{Reason Phrase}} The request was well-formed but was unable to be followed due to semantic errors 500 {{Reason Phrase}} We have a problem with our server 503 Service Unavailable We're temporarily offline for maintenance Pagination We uses cursor pagination for all REST requests which return arrays. Cursor pagination allows for fetching results after the current page of results and is well suited for realtime data. Endpoints return the latest items by default. To retrieve more results subsequent requests should specify which direction to paginate based on the data previously returned. beforeId and afterId cursors are available via response headers CP-BEFORE and CP-AFTER . Your requests should use these cursor values when making requests for pages after the initial request. Parameters: Name Type Mandatory Descripton beforeId STRING NO Request page before (newer) this pagination id. afterId STRING NO Request page after (older) this pagination id. limit INT NO Number of results per request. Default 500; max 1000 Note before and after cursor arguments should not be confused with before and after in chronological time. Most paginated requests return the latest information (newest) as the first page sorted by newest (in chronological time) first. To get older information you would request pages after the initial page. To get information newer, you would request pages before the first page. Types IDs Most of identifiers are UUID-based with kind prefix. For example order identifier CPO-8075c1c9d7334be0860e3b57f0de43e5 comes from UUID 8075c1c9-d733-4be0-860e-3b57f0de43e5 { \"orderId\" : \"CPO-8075c1c9d7334be0860e3b57f0de43e5\" } Case insensitive UUID digits are case insensitive (not prefix). Values CPO-8075c1c9d7334be0860e3b57f0de43e5 and CPO-8075C1C9d7334BE0860E3B57F0DE43E5 are same identifier. Dates All timestamps from API are returned in ISO 8601 with milliseconds. Make sure you can parse the following ISO 8601 format. Most modern languages and libraries will handle this without issues. { \"date\" : \"2020-01-16T07:35:32.129Z\" } Decimal (Financial) All numbers that represent financial values are returned as strings to preserve full precision across platforms. When making a request, you must convert your numbers to strings to avoid truncation and precision errors. { \"amount\" : \"12345678.12345678\" } Integer Integer numbers (like counter) are unquoted. { \"confirmations\" : 5 } Rate Limit When a rate limit is exceeded, a status of 429 Too Many Requests will be returned. TBD: what is limit? Authentication Generating an API Key Before being able to sign any requests, you must create an API key via the CryptoPay support. Upon creating a key you will have 3 pieces of information which you must remember: Key - Randomly generated and provided by CryptoPay Secret - Randomly generated and provided by CryptoPay Passphrase - Provided by you to further secure your API access. CryptoPay stores the salted hash of your passphrase for verification, but cannot recover the passphrase if you forget it. API Key Permissions You can restrict the functionality of API keys. Before creating the key, you must choose what permissions you would like the key to have. The permissions are: Account permission Allows to make manage accounts and account's operations. Like create account, view account, make withdrawal, etc. Merchant permission Allows a key manage your sub-merchants. Order permission Allows a key to enter orders, as well as retrieve order data. This includes POST /order and several GET endpoints. View permission Allows a key read permissions. This includes most of GET endpoints. Please refer to documentation below to see what API key permissions are required for a specific route. Creating a Request All REST requests must contain the following headers: CP-ACCESS-KEY The api key as a string. CP-ACCESS-SIGN The base64-encoded signature (see Signing a Message ). CP-ACCESS-TIMESTAMP A timestamp for your request. CP-ACCESS-PASSPHRASE The passphrase you specified when creating the API key. All request bodies should have content type application/json and be valid JSON. Signing a Message The CP-ACCESS-SIGN header is generated by creating a sha256 HMAC using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation) and base64-encode the output. The timestamp value is the same as the CP-ACCESS-TIMESTAMP header. The body is the request body string or omitted if there is no request body (typically for GET requests). The method should be UPPER CASE like \"GET\", \"POST\", etc. Note Do not forget to base64-decode the alphanumeric secret string (resulting in 64 bytes) before using it as the key for HMAC. Also, base64-encode the digest output before sending in the header. Bash + OpenSSL SECRET = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" #TIMESTAMP=$(date +%s) TIMESTAMP = 1573753848 METHOD = \"POST\" URLPATH = \"/v2/order?something=42\" BODY = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' WHAT = \" ${ TIMESTAMP }${ METHOD }${ URLPATH }${ BODY } \" SECRET_KEY = $( echo -n \" ${ SECRET } \" | base64 --decode | hexdump -v -e '/1 \"%02x\"' ) echo -n \" ${ WHAT } \" | openssl dgst -sha256 -mac HMAC -macopt \"hexkey: $SECRET_KEY \" | xxd -r -p | base64 // Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo = NodeJS const secret = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" ; //const timestamp = Date.now() / 1000; const timestamp = 1573753848 ; const method = \"POST\" ; const urlPath = \"/v2/order?something=42\" ; const body = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' ; const what = timestamp + method + urlPath + body ; const secretKey = Buffer . from ( secret , \"base64\" ); const hmac = require ( \"crypto\" ). createHmac ( \"sha256\" , secretKey ); console . log ( hmac . update ( what ). digest ( \"base64\" )); // Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo= PHP <?php $secret = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" ; #$timestamp = time() $timestamp = 1573753848 ; $method = \"POST\" ; $urlPath = \"/v2/order?something=42\" ; $body = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' ; $what = $timestamp . $method . $urlPath . $body ; $secretKey = base64_decode ( $secret ); print ( base64_encode ( hash_hmac ( \"sha256\" , $what , $secretKey , true ))); # Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo= Selecting a Timestamp The CP-ACCESS-TIMESTAMP header MUST be number of seconds since Unix Epoch in UTC. Decimal values are allowed. CP - ACCESS - TIMESTAMP : 1579161402 . 051 Your timestamp must be within 30 seconds of the api service time or your request will be considered expired and rejected. We recommend using the time endpoint to query for the API server time if you believe there many be time skew between your server and the API servers. /v2/account Type Description ONCE One-time account for handle crypto deposit for single order INFINITY Long-term account to handle a lot of orders TRANSIT Transit account (temprary hold funds) HOLD Long-term account to hold funds List accounts Retrieve a list of all your accounts. GET /v2/account Permission: Account or View Parameters: Name Type Mandatory Descripton currency STRING NO Filter by currency . Comma separated combination of currencies like BTC, ETH, etc. includeZero BOOLEAN NO Include zero balance accounts. Default: false. beforeId STRING NO Request page before (newer) this pagination id. Pagination's param . afterId STRING NO Request page after (older) this pagination id. Pagination's param . limit INT NO Number of results per request. Default 500; max 1000. Pagination's param . Response body [ { \"accountId\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"type\" : \"TRANSIT\" , \"tag\" : \"Destination for order CPO-9706cb6acb1c4d8599394374b10022a0\" , \"balance\" : \"0\" , \"currency\" : \"USD\" }, { \"accountId\" : \"CPA-7d7f94fecfbb4e5ea94cc540c9935ae4\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-b1b4203251094b0983f33133340e7672\" , \"balance\" : \"0\" , \"currency\" : \"BTC\" }, { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-19824601944647cda1d2541df563dc26\" , \"balance\" : \"0.0223\" , \"currency\" : \"BTC\" }, { \"accountId\" : \"CPA-dbcbcf25a5b145c88e0d4e40db864a65\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-9706cb6acb1c4d8599394374b10022a0\" , \"balance\" : \"15236.97272057\" , \"currency\" : \"LTC\" }, ... ] Create account POST /v2/account Permission: Account Request body: { \"clientAccountId\" : \"unique merchant's identifier\" , \"currency\" : \"BTC\" , \"tag\" : \"Account for merchant's user XXX\" , \"type\" : \"INFINITY\" } Response body: { \"accountId\" : \"CPA-283eb9706cf448969798eca9c54fc438\" , \"clientAccountId\" : \"unique merchant's identifier\" , \"type\" : \"INFINITY\" , \"createdAt\" : \"2020-01-17T15:57:11.183Z\" , \"tag\" : \"Account for merchant's user XXX\" , \"balance\" : \"0\" , \"deposits\" : 0 , \"withdrawals\" : 0 , \"orders\" : 0 , \"currency\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } Get account details Retrieve details of an account. GET /v2/account/{{accountId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"type\" : \"ONCE\" , \"createdAt\" : \"2020-01-16T09:51:58.598Z\" , \"tag\" : \"Deposit for order CPO-19824601944647cda1d2541df563dc26\" , \"balance\" : \"0.0223\" , \"deposits\" : [ \"CPD-7902170dd2124b80b3d4c46e4806026f\" , \"CPD-eeb6dff743824161a7e031528c48b5b2\" ], \"withdrawals\" : [], \"orders\" : [ \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" ], \"currency\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } Get deposit details Retrieve details of a deposit. GET /v2/account/{{accountId}}/deposit/{{depositId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" depositId IDENTIFIER YES Account identifier, like \"CPD-eeb6dff743824161a7e031528c48b5b2\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"depositId\" : \"CPD-7902170dd2124b80b3d4c46e4806026f\" , \"status\" : \"ACCEPTED\" , \"date\" : \"2020-01-16T12:56:07.111Z\" , // present only for ACCEPTED or REJECTED statuses \"amount\" : \"0.55133277\" , \"tag\" : \"Received deposit for BTC:mainnet:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"currency\" : \"BTC\" , \"confirmations\" : 6 , \"block\" : 12345678 , \"txHash\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } Get withdrawal details Retrieve details of a withdrawal. GET /v2/account/{{accountId}}/withdrawal/{{withdrawalId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" withdrawalId IDENTIFIER YES Account identifier, like \"CPW-87d903426d9448a0ac5e8402a7973654\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"withdrawalId\" : \"CPW-87d903426d9448a0ac5e8402a7973654\" , \"status\" : \"ACCEPTED\" , \"amount\" : \"599.44\" , \"date\" : \"2020-01-16T12:56:07.111Z\" , // present only for ACCEPTED or REJECTED statuses \"tag\" : \"Sent withdrawal to CEX:upXXXXXXXXXX according to processing instrument flow\" , \"currency\" : \"USD\" , ... } Make withdrawal Prepate withdrawal POST /v2/account/{{accountId}}/withdrawal Permission: Account Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" Request body: { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/account-withdrawal-make.request.json\" , \"clientWithdrawalId\" : \"333548887804-RET\" , \"tag\" : \"Return fund to end-user\" , \"feeLevel\" : \"AVERAGE\" , // See details in Network fees section. \"amount\" : \"0.05\" , \"currency\" : \"BTC\" , ... // Currency specific fields \"destinationAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } Response body: { // TBD } Commit withdrawal Approve withdrawal POST /v2/account/{{accountId}}/withdrawal/{{withdrawalId}}/commit No request body: Response body: { // TBD } /v2/instrument List available instruments Returns list of instruments GET /v2/instrument Permission: Order or View Response body { \"CRYPTO_BUY\" : { \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"active\" : true }, \"READY_TO_EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"READY_TO_WITHDRAWAL\" : { \"description\" : \"Crypto funds were bought. Ready to withdrawal.\" , \"active\" : false } } }, \"CRYPTO_SELL\" : { \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"enabled\" : true }, \"AWAIT_DEPOSIT\" : { \"description\" : \"Order is wait for deposit.\" }, \"READY_TO_EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"enabled\" : false } } } } /v2/notification The endpoint allows to control notifications like subscribe/unsibscribe, see topics, see message history See more details about our notification engine in Callbacks documentation. There defines management methods only. Topic List Returns list of available topics GET /v2/notification/topic Permission: Merchant Response body { \"ORDER\" : \"Emit messages when order's status or state have been changed. Message body same as response of Fetch order.\" , \"DEPOSIT\" : \"Emit messages when deposit detected/updated. Message body same as response of Fetch deposit.\" , \"WITHDRAWAL\" : \"Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal.\" , \"EXCHANGE\" : \"Emit messages when exchange flow completed. Includes accounting information.\" ... } Subscribers Allows to manage your subscribes List subscribers Returns list of subscribers according filter defined by parameters GET /v2/notification/subscriber Permission: Merchant Response body { \"webhook.784293b3-2000-4f89-aaff-887c04b7c97a\" : { \"kind\" : \"webhook\" , \"topic\" : \"ORDER\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.c4c77664-e09a-46f6-9ef6-b360b7120da0\" : { \"kind\" : \"webhook\" , \"topic\" : \"DEPOSIT\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.8aab27a3-2b25-4312-a55a-2d487e40d086\" : { \"kind\" : \"webhook\" , \"topic\" : \"EXCHANGE\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.5395414e-7936-441e-b5b9-44a5f8bad7d0\" : { \"kind\" : \"webhook\" , \"topic\" : \"WITHDRAWAL\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, ... } Create subscriber POST /v2/notification/subscriber Permission: Merchant Request body: { \"kind\" : \"webhook\" , \"topic\" : \"ORDER\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional } Response body: { \"kind\" : \"webhook\" , \"subscriberId\" : \"webhook.784293b3-2000-4f89-aaff-887c04b7c97a\" } Delete subscriber DELETE /v2/notification/subscriber/webhook.784293b3-2000-4f89-aaff-887c04b7c97a No request body Permission: Merchant Response body { \"deleteDate\" : \"2019-10-10T12:00:01.223Z\" } /v2/network Provides information about cryptocurrency network. Network fees Cryptocurrency network fees are a fee that spenders may include in their on-chain transaction in order to have it included in a block. There are three network fee levels available for withdrawal transactions. Example for Bitcoin network: Level Expected blocks Expected time SLOW 7 ~1 hour AVERAGE 3 ~30 minutes FAST 1 ~10 minutes It is a very dynamic thing, therefore each level changes its value every minute in such a way as to guarantee that the transaction will be included in a specific block within a given time frame. GET /v2/network/{{currency}}/fee Permission: View Parameters: Name Type Mandatory Descripton currency IDENTIFIER YES Crypto currency like BTC, LTC, etc. Response body { \"SLOW\" : { \"fee\" : \"0.00004162\" , \"currency\" : \"BTC\" }, \"AVERAGE\" : { \"fee\" : \"0.00004357\" , \"currency\" : \"BTC\" }, \"FAST\" : { \"fee\" : \"0.00005612\" , \"currency\" : \"BTC\" } } The network feeLevel can be specified in a Make withdrawal request body. /v2/merchant Merchant endpoint is available for sub-merchants management. Every request must be signed using the described authentication scheme. List merchants Returns list of sub-merchants according filter defined by parameters GET /v2/merchant Permission: Merchant or View Parameters: Name Type Mandatory Descripton status ENUM NO ACTIVE, INSATLLING, BLOCKED Create merchant Register a new merchant POST /v2/merchant Permission: Merchant Request body: { \"TBD\" : \"//\" } Update merchant Update an existing merchant PUT /v2/merchant Permission: Merchant Request body: { \"TBD\" : \"//\" } /v2/order Order endpoint is available for order management. Every request must be signed using the described authentication scheme. Order statuses: PENDING - Order in progress. SLEEPING - Paused(sleeping). Wait for approve a breakpoint. See Resume breakpoint . ACCEPTED - Successfully completed REJECTED - Failure Order lifecycle: graph TD PENDING --> SLEEPING SLEEPING --> PENDING PENDING --> ACCEPTED PENDING --> REJECTED List orders Returns list of orders according filter defined by parameters GET /v2/order Permission: Order or View Parameters: Name Type Mandatory Descripton instrument STRING NO Instrument name (like: CRYPTO_BUY) startDate ISO 8601 NO Date to get orders from INCLUSIVE endDate ISO 8601 NO Date to get orders until EXCLUSIVE status STRING NO Status: NEW, PENDING, ACCEPTED or REJECTED beforeId STRING NO Request page before (newer) this pagination id. Pagination's param . afterId STRING NO Request page after (older) this pagination id. Pagination's param . limit INT NO Number of results per request. Default 500; max 1000. Pagination's param . Response body [ { \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"status\" : \"NEW\" , \"state\" : null }, { \"orderId\" : \"CPO-6da1f03f748746588441e95e40ec429b\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"status\" : \"ACCEPTED\" , \"state\" : null }, ... ] Create order Register a new order POST /v2/order Note This is an idempotent POST. Any duplicate request will be completed with response of the first request within 24 hours from the first request. This behaviour in conclustion with clientOrderId prevents potential order duplicates. Note You are able to make dry-run call before creating real orders. Add header: CP-EXECUTE-MODE: dry-run when execute this method. Permission: Order Request/Response body: Generic --> { \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"<NAME>\" , ...instrument specific fields... } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/instruments.response.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"NEW\" , \"state\" : null , \"instrument\" : \"<NAME>\" , ...instrument specific fields... } CRYPTO_BUY (fait) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"currency\" : \"BTC\" }, \"withdrawalAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_BUY (crypto) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"USD\" }, \"to\" : { \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"withdrawalAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_SELL (fait) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"BTC\" , \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" // optional , will create new if skiped }, \"to\" : { \"currency\" : \"USD\" , \"amount\" : \"150.42\" } } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } CRYPTO_SELL (crypto) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" , \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" // optional , will create new if skiped }, \"to\" : { \"currency\" : \"USD\" } } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } Note Instrument specific fields are described in JSON schemas Fetch order Fetch single order by ID GET /v2/order/{{orderId}} Permission: Order or View Parameters: Name Type Mandatory Descripton orderId IDENTIFIER YES Identifier of the order Response body CRYPTO_BUY { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_SELL { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } Breakpoints Breakpoints allow to control processing execution flow. List breakpoints Returns list of flow breakpoints GET /v2/order/{{orderId}}/breakpoint { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.breakpoints.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"instrument\" : \"CRYPTO_SELL\" , \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"active\" : false }, \"AWAIT_DEPOSIT\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"WITHDRAWAL\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false } } } Permission: Order or View Resume breakpoint POST /v2/order/{{orderId}}/breakpoint/{{breakpointName}} Permission: Order No request body Note The method will return HTTP 403 if breakpoint in not signal state /v2/risk We uses screening tools that monitor illicit cryptocurrency addresses and tag addresses that interact with them. These tools can let us know with a high degree of certainty if cryptocurrency transactions we process have been linked to (or originated from) illicit activities online (terrorist funding, ML, dark marketplace activities, trafficking and so on). We take the data received with these tools very seriously as they help us monitor compliance with AML standards. Purpose of monitoring these transactions/addresses is, we do not want to process these funds, and neither do merchants. A level attribute that is available in callbacks that we send to a merchant's server regarding all transaction-related events dictates how close the transaction that was received was related to the illicit addresses (e.g. was it sent directly from a 'bad' address, or are there a few hops in between). Value Description LOW No red flags MEDIUM No red flags but we recommend to look closely at a user whom the transaction relates to and inform your Fraud Prevention / Transaction Monitoring teams HIGH Red flags. We Highly recommend to restrict the user's account and immediately inform your Fraud Prevention / Transaction Monitoring teams Score POST /v2/risk/score TBD /v2/time Get the API server time. GET /v2/time Note This endpoint does not require authentication. Response body { \"iso\" : \"2019-11-16T10:57:37.209Z\" , \"epoch\" : 1573901857.209 } The epoch field represents decimal seconds since Unix Epoch .","title":"REST API"},{"location":"api/#rest-api","text":"","title":"REST API"},{"location":"api/#basics","text":"Data is returned in ascending order. Oldest first, newest last. All time and timestamp related fields are in ISO 8601 . For GET endpoints, parameters must be sent as a query string . For POST, PUT, and DELETE endpoints, the parameters are sent in the request body with content type application/json . Success request codes: 2XX Client's mistakes: 4XX Server's errors: 5XX","title":"Basics"},{"location":"api/#responses","text":"Our API uses HTTP status codes to indicate the status of your requests. This includes successful and unsuccessful responses. 2xx (Successful): The request was successfully received, understood, and accepted 4xx (Client Error): The request contains bad syntax or cannot be fulfilled 5xx (Server Error): The server failed to fulfill an apparently valid request Error Reason Phrase An unsuccessful response DOES NOT HAVE body. Error message passed via Reason Phrase along with Status Code Status Code Meaning 200 OK Standard response for successful HTTP requests 201 Created The request has been fulfilled, resulting in the creation of a new resource 202 Accepted The request has been accepted for processing, but the processing has not been completed 400 {{Reason Phrase}} The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing) 401 {{Reason Phrase}} Most likely you wasn't able to construct and sign your API request correctly using HMAC 403 {{Reason Phrase}} You don't have required permissions to perform requested action on the resource 404 {{Reason Phrase}} We don't have the resource you've requested 409 {{Reason Phrase}} Most likely the client's identifier value you're trying to use had been used before 422 {{Reason Phrase}} The request was well-formed but was unable to be followed due to semantic errors 500 {{Reason Phrase}} We have a problem with our server 503 Service Unavailable We're temporarily offline for maintenance","title":"Responses"},{"location":"api/#pagination","text":"We uses cursor pagination for all REST requests which return arrays. Cursor pagination allows for fetching results after the current page of results and is well suited for realtime data. Endpoints return the latest items by default. To retrieve more results subsequent requests should specify which direction to paginate based on the data previously returned. beforeId and afterId cursors are available via response headers CP-BEFORE and CP-AFTER . Your requests should use these cursor values when making requests for pages after the initial request. Parameters: Name Type Mandatory Descripton beforeId STRING NO Request page before (newer) this pagination id. afterId STRING NO Request page after (older) this pagination id. limit INT NO Number of results per request. Default 500; max 1000 Note before and after cursor arguments should not be confused with before and after in chronological time. Most paginated requests return the latest information (newest) as the first page sorted by newest (in chronological time) first. To get older information you would request pages after the initial page. To get information newer, you would request pages before the first page.","title":"Pagination"},{"location":"api/#types","text":"","title":"Types"},{"location":"api/#ids","text":"Most of identifiers are UUID-based with kind prefix. For example order identifier CPO-8075c1c9d7334be0860e3b57f0de43e5 comes from UUID 8075c1c9-d733-4be0-860e-3b57f0de43e5 { \"orderId\" : \"CPO-8075c1c9d7334be0860e3b57f0de43e5\" } Case insensitive UUID digits are case insensitive (not prefix). Values CPO-8075c1c9d7334be0860e3b57f0de43e5 and CPO-8075C1C9d7334BE0860E3B57F0DE43E5 are same identifier.","title":"IDs"},{"location":"api/#dates","text":"All timestamps from API are returned in ISO 8601 with milliseconds. Make sure you can parse the following ISO 8601 format. Most modern languages and libraries will handle this without issues. { \"date\" : \"2020-01-16T07:35:32.129Z\" }","title":"Dates"},{"location":"api/#decimal-financial","text":"All numbers that represent financial values are returned as strings to preserve full precision across platforms. When making a request, you must convert your numbers to strings to avoid truncation and precision errors. { \"amount\" : \"12345678.12345678\" }","title":"Decimal (Financial)"},{"location":"api/#integer","text":"Integer numbers (like counter) are unquoted. { \"confirmations\" : 5 }","title":"Integer"},{"location":"api/#rate-limit","text":"When a rate limit is exceeded, a status of 429 Too Many Requests will be returned. TBD: what is limit?","title":"Rate Limit"},{"location":"api/#authentication","text":"","title":"Authentication"},{"location":"api/#generating-an-api-key","text":"Before being able to sign any requests, you must create an API key via the CryptoPay support. Upon creating a key you will have 3 pieces of information which you must remember: Key - Randomly generated and provided by CryptoPay Secret - Randomly generated and provided by CryptoPay Passphrase - Provided by you to further secure your API access. CryptoPay stores the salted hash of your passphrase for verification, but cannot recover the passphrase if you forget it.","title":"Generating an API Key"},{"location":"api/#api-key-permissions","text":"You can restrict the functionality of API keys. Before creating the key, you must choose what permissions you would like the key to have. The permissions are:","title":"API Key Permissions"},{"location":"api/#account-permission","text":"Allows to make manage accounts and account's operations. Like create account, view account, make withdrawal, etc.","title":"Account permission"},{"location":"api/#merchant-permission","text":"Allows a key manage your sub-merchants.","title":"Merchant permission"},{"location":"api/#order-permission","text":"Allows a key to enter orders, as well as retrieve order data. This includes POST /order and several GET endpoints.","title":"Order permission"},{"location":"api/#view-permission","text":"Allows a key read permissions. This includes most of GET endpoints. Please refer to documentation below to see what API key permissions are required for a specific route.","title":"View permission"},{"location":"api/#creating-a-request","text":"All REST requests must contain the following headers: CP-ACCESS-KEY The api key as a string. CP-ACCESS-SIGN The base64-encoded signature (see Signing a Message ). CP-ACCESS-TIMESTAMP A timestamp for your request. CP-ACCESS-PASSPHRASE The passphrase you specified when creating the API key. All request bodies should have content type application/json and be valid JSON.","title":"Creating a Request"},{"location":"api/#signing-a-message","text":"The CP-ACCESS-SIGN header is generated by creating a sha256 HMAC using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation) and base64-encode the output. The timestamp value is the same as the CP-ACCESS-TIMESTAMP header. The body is the request body string or omitted if there is no request body (typically for GET requests). The method should be UPPER CASE like \"GET\", \"POST\", etc. Note Do not forget to base64-decode the alphanumeric secret string (resulting in 64 bytes) before using it as the key for HMAC. Also, base64-encode the digest output before sending in the header. Bash + OpenSSL SECRET = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" #TIMESTAMP=$(date +%s) TIMESTAMP = 1573753848 METHOD = \"POST\" URLPATH = \"/v2/order?something=42\" BODY = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' WHAT = \" ${ TIMESTAMP }${ METHOD }${ URLPATH }${ BODY } \" SECRET_KEY = $( echo -n \" ${ SECRET } \" | base64 --decode | hexdump -v -e '/1 \"%02x\"' ) echo -n \" ${ WHAT } \" | openssl dgst -sha256 -mac HMAC -macopt \"hexkey: $SECRET_KEY \" | xxd -r -p | base64 // Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo = NodeJS const secret = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" ; //const timestamp = Date.now() / 1000; const timestamp = 1573753848 ; const method = \"POST\" ; const urlPath = \"/v2/order?something=42\" ; const body = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' ; const what = timestamp + method + urlPath + body ; const secretKey = Buffer . from ( secret , \"base64\" ); const hmac = require ( \"crypto\" ). createHmac ( \"sha256\" , secretKey ); console . log ( hmac . update ( what ). digest ( \"base64\" )); // Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo= PHP <?php $secret = \"cNmgFLOwbckPszgJdUe4rdpcUo2IBHtNPsyxAScjl7CN4omMN64UJAvODT8PsrPIfR7TosKUfEFROyhz/YJxsw==\" ; #$timestamp = time() $timestamp = 1573753848 ; $method = \"POST\" ; $urlPath = \"/v2/order?something=42\" ; $body = '{\"clientOrderId\":\"1490548887804-XA-1112-TU\",\"clientOrderTag\":\"My inifinity exchange order\",\"instrument\":\"CRYPTO_SELL_INFINITY\",\"fiatCurrency\":\"EUR\",\"cryptoCurrency\":\"BTC\"}' ; $what = $timestamp . $method . $urlPath . $body ; $secretKey = base64_decode ( $secret ); print ( base64_encode ( hash_hmac ( \"sha256\" , $what , $secretKey , true ))); # Re1ny7V8OHYixrjZ7YZzGYWUnjGQzknpn53FUHdE7Qo=","title":"Signing a Message"},{"location":"api/#selecting-a-timestamp","text":"The CP-ACCESS-TIMESTAMP header MUST be number of seconds since Unix Epoch in UTC. Decimal values are allowed. CP - ACCESS - TIMESTAMP : 1579161402 . 051 Your timestamp must be within 30 seconds of the api service time or your request will be considered expired and rejected. We recommend using the time endpoint to query for the API server time if you believe there many be time skew between your server and the API servers.","title":"Selecting a Timestamp"},{"location":"api/#v2account","text":"Type Description ONCE One-time account for handle crypto deposit for single order INFINITY Long-term account to handle a lot of orders TRANSIT Transit account (temprary hold funds) HOLD Long-term account to hold funds","title":"/v2/account"},{"location":"api/#list-accounts","text":"Retrieve a list of all your accounts. GET /v2/account Permission: Account or View Parameters: Name Type Mandatory Descripton currency STRING NO Filter by currency . Comma separated combination of currencies like BTC, ETH, etc. includeZero BOOLEAN NO Include zero balance accounts. Default: false. beforeId STRING NO Request page before (newer) this pagination id. Pagination's param . afterId STRING NO Request page after (older) this pagination id. Pagination's param . limit INT NO Number of results per request. Default 500; max 1000. Pagination's param . Response body [ { \"accountId\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"type\" : \"TRANSIT\" , \"tag\" : \"Destination for order CPO-9706cb6acb1c4d8599394374b10022a0\" , \"balance\" : \"0\" , \"currency\" : \"USD\" }, { \"accountId\" : \"CPA-7d7f94fecfbb4e5ea94cc540c9935ae4\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-b1b4203251094b0983f33133340e7672\" , \"balance\" : \"0\" , \"currency\" : \"BTC\" }, { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-19824601944647cda1d2541df563dc26\" , \"balance\" : \"0.0223\" , \"currency\" : \"BTC\" }, { \"accountId\" : \"CPA-dbcbcf25a5b145c88e0d4e40db864a65\" , \"type\" : \"ONCE\" , \"tag\" : \"Deposit for order CPO-9706cb6acb1c4d8599394374b10022a0\" , \"balance\" : \"15236.97272057\" , \"currency\" : \"LTC\" }, ... ]","title":"List accounts"},{"location":"api/#create-account","text":"POST /v2/account Permission: Account Request body: { \"clientAccountId\" : \"unique merchant's identifier\" , \"currency\" : \"BTC\" , \"tag\" : \"Account for merchant's user XXX\" , \"type\" : \"INFINITY\" } Response body: { \"accountId\" : \"CPA-283eb9706cf448969798eca9c54fc438\" , \"clientAccountId\" : \"unique merchant's identifier\" , \"type\" : \"INFINITY\" , \"createdAt\" : \"2020-01-17T15:57:11.183Z\" , \"tag\" : \"Account for merchant's user XXX\" , \"balance\" : \"0\" , \"deposits\" : 0 , \"withdrawals\" : 0 , \"orders\" : 0 , \"currency\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" }","title":"Create account"},{"location":"api/#get-account-details","text":"Retrieve details of an account. GET /v2/account/{{accountId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"type\" : \"ONCE\" , \"createdAt\" : \"2020-01-16T09:51:58.598Z\" , \"tag\" : \"Deposit for order CPO-19824601944647cda1d2541df563dc26\" , \"balance\" : \"0.0223\" , \"deposits\" : [ \"CPD-7902170dd2124b80b3d4c46e4806026f\" , \"CPD-eeb6dff743824161a7e031528c48b5b2\" ], \"withdrawals\" : [], \"orders\" : [ \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" ], \"currency\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" }","title":"Get account details"},{"location":"api/#get-deposit-details","text":"Retrieve details of a deposit. GET /v2/account/{{accountId}}/deposit/{{depositId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" depositId IDENTIFIER YES Account identifier, like \"CPD-eeb6dff743824161a7e031528c48b5b2\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"depositId\" : \"CPD-7902170dd2124b80b3d4c46e4806026f\" , \"status\" : \"ACCEPTED\" , \"date\" : \"2020-01-16T12:56:07.111Z\" , // present only for ACCEPTED or REJECTED statuses \"amount\" : \"0.55133277\" , \"tag\" : \"Received deposit for BTC:mainnet:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"currency\" : \"BTC\" , \"confirmations\" : 6 , \"block\" : 12345678 , \"txHash\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" }","title":"Get deposit details"},{"location":"api/#get-withdrawal-details","text":"Retrieve details of a withdrawal. GET /v2/account/{{accountId}}/withdrawal/{{withdrawalId}} Permission: Account or View Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" withdrawalId IDENTIFIER YES Account identifier, like \"CPW-87d903426d9448a0ac5e8402a7973654\" Response body { \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"withdrawalId\" : \"CPW-87d903426d9448a0ac5e8402a7973654\" , \"status\" : \"ACCEPTED\" , \"amount\" : \"599.44\" , \"date\" : \"2020-01-16T12:56:07.111Z\" , // present only for ACCEPTED or REJECTED statuses \"tag\" : \"Sent withdrawal to CEX:upXXXXXXXXXX according to processing instrument flow\" , \"currency\" : \"USD\" , ... }","title":"Get withdrawal details"},{"location":"api/#make-withdrawal","text":"Prepate withdrawal POST /v2/account/{{accountId}}/withdrawal Permission: Account Parameters: Name Type Mandatory Descripton accountId IDENTIFIER YES Account identifier, like \"CPA-4bd95e67ddd842908b3225ba64950f7c\" Request body: { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/account-withdrawal-make.request.json\" , \"clientWithdrawalId\" : \"333548887804-RET\" , \"tag\" : \"Return fund to end-user\" , \"feeLevel\" : \"AVERAGE\" , // See details in Network fees section. \"amount\" : \"0.05\" , \"currency\" : \"BTC\" , ... // Currency specific fields \"destinationAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } Response body: { // TBD }","title":"Make withdrawal"},{"location":"api/#commit-withdrawal","text":"Approve withdrawal POST /v2/account/{{accountId}}/withdrawal/{{withdrawalId}}/commit No request body: Response body: { // TBD }","title":"Commit withdrawal"},{"location":"api/#v2instrument","text":"","title":"/v2/instrument"},{"location":"api/#list-available-instruments","text":"Returns list of instruments GET /v2/instrument Permission: Order or View Response body { \"CRYPTO_BUY\" : { \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"active\" : true }, \"READY_TO_EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"READY_TO_WITHDRAWAL\" : { \"description\" : \"Crypto funds were bought. Ready to withdrawal.\" , \"active\" : false } } }, \"CRYPTO_SELL\" : { \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"enabled\" : true }, \"AWAIT_DEPOSIT\" : { \"description\" : \"Order is wait for deposit.\" }, \"READY_TO_EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"enabled\" : false } } } }","title":"List available instruments"},{"location":"api/#v2notification","text":"The endpoint allows to control notifications like subscribe/unsibscribe, see topics, see message history See more details about our notification engine in Callbacks documentation. There defines management methods only.","title":"/v2/notification"},{"location":"api/#topic","text":"","title":"Topic"},{"location":"api/#list","text":"Returns list of available topics GET /v2/notification/topic Permission: Merchant Response body { \"ORDER\" : \"Emit messages when order's status or state have been changed. Message body same as response of Fetch order.\" , \"DEPOSIT\" : \"Emit messages when deposit detected/updated. Message body same as response of Fetch deposit.\" , \"WITHDRAWAL\" : \"Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal.\" , \"EXCHANGE\" : \"Emit messages when exchange flow completed. Includes accounting information.\" ... }","title":"List"},{"location":"api/#subscribers","text":"Allows to manage your subscribes","title":"Subscribers"},{"location":"api/#list-subscribers","text":"Returns list of subscribers according filter defined by parameters GET /v2/notification/subscriber Permission: Merchant Response body { \"webhook.784293b3-2000-4f89-aaff-887c04b7c97a\" : { \"kind\" : \"webhook\" , \"topic\" : \"ORDER\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.c4c77664-e09a-46f6-9ef6-b360b7120da0\" : { \"kind\" : \"webhook\" , \"topic\" : \"DEPOSIT\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.8aab27a3-2b25-4312-a55a-2d487e40d086\" : { \"kind\" : \"webhook\" , \"topic\" : \"EXCHANGE\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, \"webhook.5395414e-7936-441e-b5b9-44a5f8bad7d0\" : { \"kind\" : \"webhook\" , \"topic\" : \"WITHDRAWAL\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional }, ... }","title":"List subscribers"},{"location":"api/#create-subscriber","text":"POST /v2/notification/subscriber Permission: Merchant Request body: { \"kind\" : \"webhook\" , \"topic\" : \"ORDER\" , \"url\" : \"https://callback.yourdomain.ltd/callbacks\" , \"trustedCA\" : \"-----BEGIN CERTIFICATE-----\\nMII.....\\n-----END CERTIFICATE-----\" , // ...optional \"headerToken\" : \"my-secret-words-for-NF-TOKEN-header\" // ...optional } Response body: { \"kind\" : \"webhook\" , \"subscriberId\" : \"webhook.784293b3-2000-4f89-aaff-887c04b7c97a\" }","title":"Create subscriber"},{"location":"api/#delete-subscriber","text":"DELETE /v2/notification/subscriber/webhook.784293b3-2000-4f89-aaff-887c04b7c97a No request body Permission: Merchant Response body { \"deleteDate\" : \"2019-10-10T12:00:01.223Z\" }","title":"Delete subscriber"},{"location":"api/#v2network","text":"Provides information about cryptocurrency network.","title":"/v2/network"},{"location":"api/#network-fees","text":"Cryptocurrency network fees are a fee that spenders may include in their on-chain transaction in order to have it included in a block. There are three network fee levels available for withdrawal transactions. Example for Bitcoin network: Level Expected blocks Expected time SLOW 7 ~1 hour AVERAGE 3 ~30 minutes FAST 1 ~10 minutes It is a very dynamic thing, therefore each level changes its value every minute in such a way as to guarantee that the transaction will be included in a specific block within a given time frame. GET /v2/network/{{currency}}/fee Permission: View Parameters: Name Type Mandatory Descripton currency IDENTIFIER YES Crypto currency like BTC, LTC, etc. Response body { \"SLOW\" : { \"fee\" : \"0.00004162\" , \"currency\" : \"BTC\" }, \"AVERAGE\" : { \"fee\" : \"0.00004357\" , \"currency\" : \"BTC\" }, \"FAST\" : { \"fee\" : \"0.00005612\" , \"currency\" : \"BTC\" } } The network feeLevel can be specified in a Make withdrawal request body.","title":"Network fees"},{"location":"api/#v2merchant","text":"Merchant endpoint is available for sub-merchants management. Every request must be signed using the described authentication scheme.","title":"/v2/merchant"},{"location":"api/#list-merchants","text":"Returns list of sub-merchants according filter defined by parameters GET /v2/merchant Permission: Merchant or View Parameters: Name Type Mandatory Descripton status ENUM NO ACTIVE, INSATLLING, BLOCKED","title":"List merchants"},{"location":"api/#create-merchant","text":"Register a new merchant POST /v2/merchant Permission: Merchant Request body: { \"TBD\" : \"//\" }","title":"Create merchant"},{"location":"api/#update-merchant","text":"Update an existing merchant PUT /v2/merchant Permission: Merchant Request body: { \"TBD\" : \"//\" }","title":"Update merchant"},{"location":"api/#v2order","text":"Order endpoint is available for order management. Every request must be signed using the described authentication scheme. Order statuses: PENDING - Order in progress. SLEEPING - Paused(sleeping). Wait for approve a breakpoint. See Resume breakpoint . ACCEPTED - Successfully completed REJECTED - Failure Order lifecycle: graph TD PENDING --> SLEEPING SLEEPING --> PENDING PENDING --> ACCEPTED PENDING --> REJECTED","title":"/v2/order"},{"location":"api/#list-orders","text":"Returns list of orders according filter defined by parameters GET /v2/order Permission: Order or View Parameters: Name Type Mandatory Descripton instrument STRING NO Instrument name (like: CRYPTO_BUY) startDate ISO 8601 NO Date to get orders from INCLUSIVE endDate ISO 8601 NO Date to get orders until EXCLUSIVE status STRING NO Status: NEW, PENDING, ACCEPTED or REJECTED beforeId STRING NO Request page before (newer) this pagination id. Pagination's param . afterId STRING NO Request page after (older) this pagination id. Pagination's param . limit INT NO Number of results per request. Default 500; max 1000. Pagination's param . Response body [ { \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"status\" : \"NEW\" , \"state\" : null }, { \"orderId\" : \"CPO-6da1f03f748746588441e95e40ec429b\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"status\" : \"ACCEPTED\" , \"state\" : null }, ... ]","title":"List orders"},{"location":"api/#create-order","text":"Register a new order POST /v2/order Note This is an idempotent POST. Any duplicate request will be completed with response of the first request within 24 hours from the first request. This behaviour in conclustion with clientOrderId prevents potential order duplicates. Note You are able to make dry-run call before creating real orders. Add header: CP-EXECUTE-MODE: dry-run when execute this method. Permission: Order Request/Response body: Generic --> { \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"<NAME>\" , ...instrument specific fields... } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/instruments.response.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"NEW\" , \"state\" : null , \"instrument\" : \"<NAME>\" , ...instrument specific fields... } CRYPTO_BUY (fait) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"currency\" : \"BTC\" }, \"withdrawalAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_BUY (crypto) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"USD\" }, \"to\" : { \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"withdrawalAddress\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_SELL (fait) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"BTC\" , \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" // optional , will create new if skiped }, \"to\" : { \"currency\" : \"USD\" , \"amount\" : \"150.42\" } } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } CRYPTO_SELL (crypto) --> { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.request.json\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , // optional \"from\" : { \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" , \"accountId\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" // optional , will create new if skiped }, \"to\" : { \"currency\" : \"USD\" } } <-- { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } Note Instrument specific fields are described in JSON schemas","title":"Create order"},{"location":"api/#fetch-order","text":"Fetch single order by ID GET /v2/order/{{orderId}} Permission: Order or View Parameters: Name Type Mandatory Descripton orderId IDENTIFIER YES Identifier of the order Response body CRYPTO_BUY { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } CRYPTO_SELL { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } }","title":"Fetch order"},{"location":"api/#breakpoints","text":"Breakpoints allow to control processing execution flow.","title":"Breakpoints"},{"location":"api/#list-breakpoints","text":"Returns list of flow breakpoints GET /v2/order/{{orderId}}/breakpoint { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.breakpoints.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"instrument\" : \"CRYPTO_SELL\" , \"breakpoints\" : { \"NEW\" : { \"description\" : \"Order was created. Ready start processing.\" , \"active\" : false }, \"AWAIT_DEPOSIT\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"EXCHANGE\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false }, \"WITHDRAWAL\" : { \"description\" : \"Order's balance enough to make exchange. Ready to exchange.\" , \"active\" : false } } } Permission: Order or View","title":"List breakpoints"},{"location":"api/#resume-breakpoint","text":"POST /v2/order/{{orderId}}/breakpoint/{{breakpointName}} Permission: Order No request body Note The method will return HTTP 403 if breakpoint in not signal state","title":"Resume breakpoint"},{"location":"api/#v2risk","text":"We uses screening tools that monitor illicit cryptocurrency addresses and tag addresses that interact with them. These tools can let us know with a high degree of certainty if cryptocurrency transactions we process have been linked to (or originated from) illicit activities online (terrorist funding, ML, dark marketplace activities, trafficking and so on). We take the data received with these tools very seriously as they help us monitor compliance with AML standards. Purpose of monitoring these transactions/addresses is, we do not want to process these funds, and neither do merchants. A level attribute that is available in callbacks that we send to a merchant's server regarding all transaction-related events dictates how close the transaction that was received was related to the illicit addresses (e.g. was it sent directly from a 'bad' address, or are there a few hops in between). Value Description LOW No red flags MEDIUM No red flags but we recommend to look closely at a user whom the transaction relates to and inform your Fraud Prevention / Transaction Monitoring teams HIGH Red flags. We Highly recommend to restrict the user's account and immediately inform your Fraud Prevention / Transaction Monitoring teams","title":"/v2/risk"},{"location":"api/#score","text":"POST /v2/risk/score TBD","title":"Score"},{"location":"api/#v2time","text":"Get the API server time. GET /v2/time Note This endpoint does not require authentication. Response body { \"iso\" : \"2019-11-16T10:57:37.209Z\" , \"epoch\" : 1573901857.209 } The epoch field represents decimal seconds since Unix Epoch .","title":"/v2/time"},{"location":"callbacks-webhooks/","text":"Webhooks Webhooks are \"user-defined HTTP callbacks\". When an event occurs, Notifier makes an HTTP request to the URI configured for the webhook. Warning Your endpoint should ALWAYS return a valid HTTP response with HTTP status 2XX. If you do not do this then Notifier will think the hook failed and retry it. Headers Notifier will include following headers to each request: Notifier headers NF-MSG_ID - Message identifier NF-TOKEN - Secret token (if set) Forward headers CP-ACCESS-KEY The api key as a string. CP-ACCESS-SIGN - The base64-encoded signature CP-ACCESS-TIMESTAMP - A timestamp that was used in signature calculation Security SSL verification SSL Verification enables automatically for URL scheme https: . No additional configuration required. Optional If you specify a CA Certificates (via API parameter trustedCA ), it will be used to verify the SSL certificate of the webhook endpoint. Otherwise the SSL certificate of the webhook endpoint is verified based on an internal list of Certificate Authorities. Secret token If you setup a secret token (via API parameter headerToken ), it will be sent with the hook request in the NF-TOKEN HTTP header. Message signature Before processing a message you need to check signature. // TBD Subscribe To start receiving messaged, you need yo subscribe a topic . Use appropriate methods from REST API . Topic ORDER Emit messages when Order 's status and/or state have been changed. Message body same as response of Fetch order Instrument CRYPTO_BUY Sunshine NEW { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } READY_TO_EXCHANGE { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_EXCHANGE\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:22.803Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } READY_TO_WITHDRAWAL { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_WITHDRAWAL\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:29.117Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } ACCEPTED { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"ACCEPTED\" , \"state\" : null , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:16:02.006Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } } Instrument CRYPTO_SELL Sunshine NEW { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } AWAIT_DEPOSIT { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"SLEEPING\" , \"state\" : \"AWAIT_DEPOSIT\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.445Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } READY_TO_EXCHANGE { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_EXCHANGE\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:15:01.812Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } } ACCEPTED { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"ACCEPTED\" , \"state\" : null , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:15:22.078Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } } Topic DEPOSIT Emit messages when deposit detected/updated. Message body same as response of Fetch deposit //TBD Topic WITHDRAWAL Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal //TBD","title":"Webhooks"},{"location":"callbacks-webhooks/#webhooks","text":"Webhooks are \"user-defined HTTP callbacks\". When an event occurs, Notifier makes an HTTP request to the URI configured for the webhook. Warning Your endpoint should ALWAYS return a valid HTTP response with HTTP status 2XX. If you do not do this then Notifier will think the hook failed and retry it.","title":"Webhooks"},{"location":"callbacks-webhooks/#headers","text":"Notifier will include following headers to each request:","title":"Headers"},{"location":"callbacks-webhooks/#notifier-headers","text":"NF-MSG_ID - Message identifier NF-TOKEN - Secret token (if set)","title":"Notifier headers"},{"location":"callbacks-webhooks/#forward-headers","text":"CP-ACCESS-KEY The api key as a string. CP-ACCESS-SIGN - The base64-encoded signature CP-ACCESS-TIMESTAMP - A timestamp that was used in signature calculation","title":"Forward headers"},{"location":"callbacks-webhooks/#security","text":"","title":"Security"},{"location":"callbacks-webhooks/#ssl-verification","text":"SSL Verification enables automatically for URL scheme https: . No additional configuration required. Optional If you specify a CA Certificates (via API parameter trustedCA ), it will be used to verify the SSL certificate of the webhook endpoint. Otherwise the SSL certificate of the webhook endpoint is verified based on an internal list of Certificate Authorities.","title":"SSL verification"},{"location":"callbacks-webhooks/#secret-token","text":"If you setup a secret token (via API parameter headerToken ), it will be sent with the hook request in the NF-TOKEN HTTP header.","title":"Secret token"},{"location":"callbacks-webhooks/#message-signature","text":"Before processing a message you need to check signature. // TBD","title":"Message signature"},{"location":"callbacks-webhooks/#subscribe","text":"To start receiving messaged, you need yo subscribe a topic . Use appropriate methods from REST API .","title":"Subscribe"},{"location":"callbacks-webhooks/#topic-order","text":"Emit messages when Order 's status and/or state have been changed. Message body same as response of Fetch order","title":"Topic ORDER"},{"location":"callbacks-webhooks/#instrument-crypto_buy","text":"","title":"Instrument CRYPTO_BUY"},{"location":"callbacks-webhooks/#sunshine","text":"NEW { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } READY_TO_EXCHANGE { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_EXCHANGE\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:22.803Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } READY_TO_WITHDRAWAL { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_WITHDRAWAL\" , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:29.117Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [] } } ACCEPTED { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_BUY.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"ACCEPTED\" , \"state\" : null , \"instrument\" : \"CRYPTO_BUY\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:16:02.006Z\" , \"from\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"to\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"withdrawal\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } }","title":"Sunshine"},{"location":"callbacks-webhooks/#instrument-crypto_sell","text":"","title":"Instrument CRYPTO_SELL"},{"location":"callbacks-webhooks/#sunshine_1","text":"NEW { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"NEW\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.128Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } AWAIT_DEPOSIT { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"SLEEPING\" , \"state\" : \"AWAIT_DEPOSIT\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:10:19.445Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [] } } READY_TO_EXCHANGE { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"PENDING\" , \"state\" : \"READY_TO_EXCHANGE\" , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:15:01.812Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : null }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } } ACCEPTED { \"$schema\" : \"https://cexiolabs.github.io/cryptopay.schemas/v2/order.CRYPTO_SELL.json\" , \"orderId\" : \"CPO-b3987b14439543c0b7c3f627cb8d0e87\" , \"clientOrderId\" : \"1490548887804-XA-1112-TU\" , \"clientOrderTag\" : \"Any merchant's data\" , \"status\" : \"ACCEPTED\" , \"state\" : null , \"instrument\" : \"CRYPTO_SELL\" , \"feeModel\" : \"INCLUDED\" , \"createdAt\" : \"2020-01-17T15:10:12.550Z\" , \"updatedAt\" : \"2020-01-17T15:15:22.078Z\" , \"from\" : { \"account\" : \"CPA-4bd95e67ddd842908b3225ba64950f7c\" , \"currency\" : \"BTC\" , \"amount\" : \"0.05142111\" }, \"to\" : { \"account\" : \"CPA-67f28d8f27b0430f8ced612f678bc0c6\" , \"currency\" : \"USD\" , \"amount\" : \"150.42\" }, \"rate\" : { \"initial\" : \"2925.25773947\" , \"exchange\" : \"2935.20361578\" }, \"fees\" : [ { \"kind\" : \"EXCHANGE\" , \"amount\" : \"2.0\" , \"currency\" : \"USD\" } ], \"deposit\" : { \"kind\" : \"BTC\" , \"network\" : \"mainnet\" , \"address\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" , \"uri\" : \"bitcoin:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx?amount=0.05142111&label=Sell%20some%20BTC%20for%20150.42\" , \"transactions\" : [ { \"//\" : \"...transaction info (include blockchain info)\" } ] } }","title":"Sunshine"},{"location":"callbacks-webhooks/#topic-deposit","text":"Emit messages when deposit detected/updated. Message body same as response of Fetch deposit //TBD","title":"Topic DEPOSIT"},{"location":"callbacks-webhooks/#topic-withdrawal","text":"Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal //TBD","title":"Topic WITHDRAWAL"},{"location":"callbacks/","text":"Callbacks Callbacks are based on Publish\u2013Subscribe pattern via a Notifier service. The Notifier service's responsibility is to deliver callback messages via Webhooks and other messaging providers. Recommendation Although notification includes real and valid data, we recommend to use notifications just as notifications and retvieve data via appropriate method of Pull API ( REST API for example). In general, any notifications system by design may delay messages. Good practice for end-application is to check status via Pull API if expected message was not received in expected time frame. Topics Topic Name Description ORDER Emit messages when order 's status and/or state have been changed. Message body same as response of Fetch order DEPOSIT Emit messages when deposit detected/updated. Message body same as response of Fetch deposit WITHDRAWAL Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal Use-case Client subscribe a desired topic Notifier deliver events Client unsubscribe the topic No delivery sequenceDiagram participant Subscriber1 participant Subscriber2 participant Notifier opt Event A Notifier->>Notifier: Skip, just audit end Subscriber2->>+Notifier: Subscribe \"ORDER\" topic Notifier-->>-Subscriber2: OK opt Event B Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message B for \"ORDER\" Subscriber2-->>-Notifier: OK end Subscriber1->>+Notifier: Subscribe \"ORDER\" topic Notifier-->>-Subscriber1: OK opt Event C Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message C for \"ORDER\" Subscriber2-->>-Notifier: OK Notifier->>+Subscriber1: Message C for \"ORDER\" Subscriber1-->>-Notifier: OK end Subscriber1->>+Notifier: Unsubscribe \"ORDER\" topic Notifier-->>-Subscriber1: OK opt Event D Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message D for \"ORDER\" Subscriber2-->>-Notifier: OK end Delivery (under re-view) Messages are sent immediately after an operation was performed. Notifier records the fact of message delivery to your system after receiving the response from your system. If message delivery is failed the server will retry with delay between attempts according to a scale was choosen at subscription phase. // TBD(Is this proper scale?) // For example powers of two scale will retry delivery until the period does not exceed 16384 seconds (~4.5hours): 1, 2, 4, 8, 16, ..., 16384(max). Notification server performs attempts to deliver a message within 3 days.","title":"Basics"},{"location":"callbacks/#callbacks","text":"Callbacks are based on Publish\u2013Subscribe pattern via a Notifier service. The Notifier service's responsibility is to deliver callback messages via Webhooks and other messaging providers. Recommendation Although notification includes real and valid data, we recommend to use notifications just as notifications and retvieve data via appropriate method of Pull API ( REST API for example). In general, any notifications system by design may delay messages. Good practice for end-application is to check status via Pull API if expected message was not received in expected time frame.","title":"Callbacks"},{"location":"callbacks/#topics","text":"Topic Name Description ORDER Emit messages when order 's status and/or state have been changed. Message body same as response of Fetch order DEPOSIT Emit messages when deposit detected/updated. Message body same as response of Fetch deposit WITHDRAWAL Emit messages when withdrawal created/updated. Message body same as response of Fetch withdrawal","title":"Topics"},{"location":"callbacks/#use-case","text":"Client subscribe a desired topic Notifier deliver events Client unsubscribe the topic No delivery sequenceDiagram participant Subscriber1 participant Subscriber2 participant Notifier opt Event A Notifier->>Notifier: Skip, just audit end Subscriber2->>+Notifier: Subscribe \"ORDER\" topic Notifier-->>-Subscriber2: OK opt Event B Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message B for \"ORDER\" Subscriber2-->>-Notifier: OK end Subscriber1->>+Notifier: Subscribe \"ORDER\" topic Notifier-->>-Subscriber1: OK opt Event C Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message C for \"ORDER\" Subscriber2-->>-Notifier: OK Notifier->>+Subscriber1: Message C for \"ORDER\" Subscriber1-->>-Notifier: OK end Subscriber1->>+Notifier: Unsubscribe \"ORDER\" topic Notifier-->>-Subscriber1: OK opt Event D Notifier->>Notifier: Schedule delivery Notifier->>+Subscriber2: Message D for \"ORDER\" Subscriber2-->>-Notifier: OK end","title":"Use-case"},{"location":"callbacks/#delivery-under-re-view","text":"Messages are sent immediately after an operation was performed. Notifier records the fact of message delivery to your system after receiving the response from your system. If message delivery is failed the server will retry with delay between attempts according to a scale was choosen at subscription phase. // TBD(Is this proper scale?) // For example powers of two scale will retry delivery until the period does not exceed 16384 seconds (~4.5hours): 1, 2, 4, 8, 16, ..., 16384(max). Notification server performs attempts to deliver a message within 3 days.","title":"Delivery (under re-view)"},{"location":"release-notes/","text":"Release Notes TBD","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"TBD","title":"Release Notes"},{"location":"terminology/","text":"Terminology Merhcant TBD Order CryptoPay Order is time-sensitive payment requests addressed to specific buyers. In another words, Order is set of attributes like fromCurrency , toCurrency , amount , etc. TBD Breakpoint Breakpoint is a point in instrument 's workflow where processing may pauses for manual approve. Each instument provides own set of breakpoints. Breakpoints by default settings may be active or inactive. Instrument's default behavior may be overridden in merchant 's settings or via order creation attibutes. TBD Instrument CryptoPay's Instrument defines kind of service. An instrument decribes how to process an order. Different instrument has own set of attributes according kind field. Note Instrument defines applied commissions (may be overriden on in merchant's configuration) Each merchant has own set of allowed instument Kinds Instrument kind Description CRYPTO_BUY Buy crypo asset (convert fiat to crypto). One time order with fixed amount. CRYPTO_SELL Sell crypo asset (convert crypto to fiat). One time order with fixed amount. CRYPTO_BUY sequenceDiagram User->>+B2C Merchant: Goes to site B2C Merchant->>+B2B Merchant: Request crypto payment B2B Merchant->>+CryptoPay: Get instruments CryptoPay-->>-B2B Merchant: Currencies, rates, etc. B2B Merchant-->>-B2C Merchant: Available instuments B2C Merchant-->>-User: Render instuments User->>+B2C Merchant: Request order B2C Merchant->>+B2B Merchant: Create order B2B Merchant->>+CryptoPay: Create order CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate CryptoPay->>CryptoPay: Calulate cash flow CryptoPay-->>B2B Merchant: Order details B2B Merchant-->>B2C Merchant: Order attribures B2C Merchant-->>User: Render order details opt Skip for dry-run mode User->>B2C Merchant: Accept order details B2C Merchant->>B2B Merchant: Approve order B2B Merchant->>+CryptoPay: Start order CryptoPay-->>B2B Merchant: Started B2B Merchant-->>B2C Merchant: Started B2C Merchant-->>User: Started CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved CryptoPay->>+Wallet: Make withdrawal Wallet-->>-CryptoPay: Withdrawal approved CryptoPay-->>-B2B Merchant: Notify (READY TO SHIP) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end CRYPTO_SELL sequenceDiagram User->>+B2C Merchant: Goes to site B2C Merchant->>+B2B Merchant: Request crypto payment B2B Merchant->>+CryptoPay: Get instruments CryptoPay-->>-B2B Merchant: Currencies, rates, etc. B2B Merchant-->>-B2C Merchant: Available instuments B2C Merchant-->>-User: Render instuments User->>+B2C Merchant: Request order B2C Merchant->>+B2B Merchant: Create order B2B Merchant->>+CryptoPay: Create order CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate opt Skip for dry-run mode CryptoPay->>+Wallet: Generate new address Wallet-->>-CryptoPay: New address end CryptoPay->>CryptoPay: Calulate cash flow CryptoPay-->>B2B Merchant: Order details B2B Merchant-->>B2C Merchant: Order attribures B2C Merchant-->>User: Render order details opt Skip for dry-run mode Wallet-->>CryptoPay: Confirmations: 0 (configurable) CryptoPay-->>B2B Merchant: Notify (PAID) B2B Merchant-->>B2C Merchant: Notify (DEPOSIT) B2C Merchant-->>User: Deposit processing Wallet-->>CryptoPay: Confirmations: 1 (configurable) CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved Wallet-->>CryptoPay: Confirmations: X (configurable) CryptoPay-->>-B2B Merchant: Notify (READY TO SHIP) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end CRYPTO_SELL (Infinity) It is possible to setup intifity sell crypo asset (convert crypto to fiat). Each crypto deposit will automatically create CRYPTO_SELL Order and schedule processing (breakpoints allowed). To achieve this behavoir you need to create Account with type = INFINITY sequenceDiagram User->>+B2C Merchant: Request payment B2C Merchant->>+B2B Merchant: Create account B2B Merchant->>+CryptoPay: Create account CryptoPay->>+Wallet: Generate new address Wallet-->>-CryptoPay: New address CryptoPay->>CryptoPay: Setup auto-order CryptoPay-->>B2B Merchant: Account details B2B Merchant-->>B2C Merchant: Account attribures B2C Merchant-->>User: Render payment details opt Infinity Loop Wallet-->>CryptoPay: Confirmations: 0 (configurable) CryptoPay->>CryptoPay: Create new CRYPTO_SELL order CryptoPay-->>B2B Merchant: Notify (NEW) B2B Merchant-->>B2C Merchant: Notify (PENDING) B2C Merchant-->>User: Deposit processing Wallet-->>CryptoPay: Confirmations: 1 (configurable) CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved Wallet-->>CryptoPay: Confirmations: X (configurable) CryptoPay-->>-B2B Merchant: Notify (ACCEPTED) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end","title":"Terminology"},{"location":"terminology/#terminology","text":"","title":"Terminology"},{"location":"terminology/#merhcant","text":"TBD","title":"Merhcant"},{"location":"terminology/#order","text":"CryptoPay Order is time-sensitive payment requests addressed to specific buyers. In another words, Order is set of attributes like fromCurrency , toCurrency , amount , etc. TBD","title":"Order"},{"location":"terminology/#breakpoint","text":"Breakpoint is a point in instrument 's workflow where processing may pauses for manual approve. Each instument provides own set of breakpoints. Breakpoints by default settings may be active or inactive. Instrument's default behavior may be overridden in merchant 's settings or via order creation attibutes. TBD","title":"Breakpoint"},{"location":"terminology/#instrument","text":"CryptoPay's Instrument defines kind of service. An instrument decribes how to process an order. Different instrument has own set of attributes according kind field. Note Instrument defines applied commissions (may be overriden on in merchant's configuration) Each merchant has own set of allowed instument","title":"Instrument"},{"location":"terminology/#kinds","text":"Instrument kind Description CRYPTO_BUY Buy crypo asset (convert fiat to crypto). One time order with fixed amount. CRYPTO_SELL Sell crypo asset (convert crypto to fiat). One time order with fixed amount.","title":"Kinds"},{"location":"terminology/#crypto_buy","text":"sequenceDiagram User->>+B2C Merchant: Goes to site B2C Merchant->>+B2B Merchant: Request crypto payment B2B Merchant->>+CryptoPay: Get instruments CryptoPay-->>-B2B Merchant: Currencies, rates, etc. B2B Merchant-->>-B2C Merchant: Available instuments B2C Merchant-->>-User: Render instuments User->>+B2C Merchant: Request order B2C Merchant->>+B2B Merchant: Create order B2B Merchant->>+CryptoPay: Create order CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate CryptoPay->>CryptoPay: Calulate cash flow CryptoPay-->>B2B Merchant: Order details B2B Merchant-->>B2C Merchant: Order attribures B2C Merchant-->>User: Render order details opt Skip for dry-run mode User->>B2C Merchant: Accept order details B2C Merchant->>B2B Merchant: Approve order B2B Merchant->>+CryptoPay: Start order CryptoPay-->>B2B Merchant: Started B2B Merchant-->>B2C Merchant: Started B2C Merchant-->>User: Started CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved CryptoPay->>+Wallet: Make withdrawal Wallet-->>-CryptoPay: Withdrawal approved CryptoPay-->>-B2B Merchant: Notify (READY TO SHIP) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end","title":"CRYPTO_BUY"},{"location":"terminology/#crypto_sell","text":"sequenceDiagram User->>+B2C Merchant: Goes to site B2C Merchant->>+B2B Merchant: Request crypto payment B2B Merchant->>+CryptoPay: Get instruments CryptoPay-->>-B2B Merchant: Currencies, rates, etc. B2B Merchant-->>-B2C Merchant: Available instuments B2C Merchant-->>-User: Render instuments User->>+B2C Merchant: Request order B2C Merchant->>+B2B Merchant: Create order B2B Merchant->>+CryptoPay: Create order CryptoPay->>+Exchange: Get rate Exchange-->>-CryptoPay: Current rate opt Skip for dry-run mode CryptoPay->>+Wallet: Generate new address Wallet-->>-CryptoPay: New address end CryptoPay->>CryptoPay: Calulate cash flow CryptoPay-->>B2B Merchant: Order details B2B Merchant-->>B2C Merchant: Order attribures B2C Merchant-->>User: Render order details opt Skip for dry-run mode Wallet-->>CryptoPay: Confirmations: 0 (configurable) CryptoPay-->>B2B Merchant: Notify (PAID) B2B Merchant-->>B2C Merchant: Notify (DEPOSIT) B2C Merchant-->>User: Deposit processing Wallet-->>CryptoPay: Confirmations: 1 (configurable) CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved Wallet-->>CryptoPay: Confirmations: X (configurable) CryptoPay-->>-B2B Merchant: Notify (READY TO SHIP) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end","title":"CRYPTO_SELL"},{"location":"terminology/#crypto_sell-infinity","text":"It is possible to setup intifity sell crypo asset (convert crypto to fiat). Each crypto deposit will automatically create CRYPTO_SELL Order and schedule processing (breakpoints allowed). To achieve this behavoir you need to create Account with type = INFINITY sequenceDiagram User->>+B2C Merchant: Request payment B2C Merchant->>+B2B Merchant: Create account B2B Merchant->>+CryptoPay: Create account CryptoPay->>+Wallet: Generate new address Wallet-->>-CryptoPay: New address CryptoPay->>CryptoPay: Setup auto-order CryptoPay-->>B2B Merchant: Account details B2B Merchant-->>B2C Merchant: Account attribures B2C Merchant-->>User: Render payment details opt Infinity Loop Wallet-->>CryptoPay: Confirmations: 0 (configurable) CryptoPay->>CryptoPay: Create new CRYPTO_SELL order CryptoPay-->>B2B Merchant: Notify (NEW) B2B Merchant-->>B2C Merchant: Notify (PENDING) B2C Merchant-->>User: Deposit processing Wallet-->>CryptoPay: Confirmations: 1 (configurable) CryptoPay->>+Exchange: Make exchange Exchange-->>-CryptoPay: Exchange approved Wallet-->>CryptoPay: Confirmations: X (configurable) CryptoPay-->>-B2B Merchant: Notify (ACCEPTED) B2B Merchant-->>-B2C Merchant: Notify (ACCEPTED) B2C Merchant-->>-User: Final details end","title":"CRYPTO_SELL (Infinity)"},{"location":"websocket-api/","text":"WebSocket API Overview TBD TBD TBD TBD TBD TBD","title":"WebSocket API"},{"location":"websocket-api/#websocket-api","text":"","title":"WebSocket API"},{"location":"websocket-api/#overview","text":"TBD","title":"Overview"},{"location":"websocket-api/#tbd","text":"","title":"TBD"},{"location":"websocket-api/#tbd_1","text":"","title":"TBD"},{"location":"websocket-api/#tbd_2","text":"","title":"TBD"},{"location":"websocket-api/#tbd_3","text":"TBD","title":"TBD"}]}